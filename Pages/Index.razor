@page "/"
@using DefaultBlazor


    <MudText Typo="Typo.h4">Autocomplete Binding with a Wrapper Component</MudText>
    <MudText Typo="Typo.h6">Demo by Boomalator (BPHynes) </MudText>

<div style="background-color:antiquewhite;margin:20px;padding:5px;">
    <MudText Typo="Typo.h6">Bound to an Object (&lt;T&gt;=SelectItem&lt;int&gt;)</MudText>
    <pre>   
    myCpu1.ToString = @(myCpu1 is not null ? (myCpu1.ToString() != "" ? myCpu1.ToString() : "<Not set>") : "<Null>")
    myCpu1.ID = @(myCpu1 is not null ? (myCpu1.Id) : "<Null>") 
    myCpu1.Text = @(myCpu1 is not null ? (!string.IsNullOrWhiteSpace(myCpu1.Text)  ? myCpu1.Text : "<Not set>") : "<Null>")
    
    &nbsp;
</pre>

    <MudLink @onclick="updateCpu1">Update myCpu1 from the main page</MudLink>

    <div style="width:400px;">
        <MudAutocompleteKey T="int?"
                            Label="Cpu1 Object"
                            Suggestions="cpus"
                            @bind-Item="myCpu1" />
    </div>

</div>

<div style="background-color:antiquewhite;margin:20px;padding:5px;">
    <MudText Typo="Typo.h6">Bound to a string</MudText>
<pre>   
    myCpu2String = @(string.IsNullOrWhiteSpace(myCpu2String) ? "<Empty>" : myCpu2String)
    &nbsp;
</pre>

    <label for="EditString" class="control-label">
        Edit string value on main page
    </label>
    <input for="EditString" class="form-control" @bind="@myCpu2String" />

    <div style="width:400px;">
        <MudAutocompleteKey T="int?" 
                            Label="A string"
                            Suggestions="cpus"
                            @bind-ItemText="@myCpu2String" />
    </div>
</div>

<div style="background-color:antiquewhite;margin:20px;padding:5px;">
    <MudText Typo="Typo.h6">Bound to an int (key/ID) [inside a model object]</MudText>
<pre>
    myAsset.ToString = @myAsset.ToString() 
    myAsset.AssetID = @myAsset.AssetID 
    myAsset.AssetDescription = @myAsset.AssetDescription 
    myAsset.CpuID = @myAsset.CpuID
    &nbsp;
</pre>

    <label for="EditInt" class="control-label">
        Edit int value on main page
    </label>
    <input for="EditInt" class="form-control" @bind="@myAsset.CpuID" />

    <div class="form-group">
        <label for="Cpu" class="control-label">
            Change int value with SELECT on main page
        </label>

        <select for="Cpu" class="form-control" @bind="@myAsset.CpuID">
            <option value=0 selected>[Select CPU Type]</option>
            @foreach (var cpu in cpus)
            {
                <option value="@cpu.Id">
                    @cpu.Text
                </option>
            }
        </select>
    </div>




    <div style="width:400px;">
        <MudAutocompleteKey T="int?"
                            Label="Bound to an integer key"
                            Suggestions="cpus"
                            @bind-ItemKey="@myAsset.CpuID" />
    </div>
</div>


@code {

    public class Asset
    {
        public string AssetID { get; set; }
        public string AssetDescription { get; set; }
        public int? CpuID { get; set; }
        public override string ToString()
        {
            return $"{AssetID}: {AssetDescription}".Trim();
        }
    }

    private SelectItem<int> bound2;

    private Asset myAsset = new Asset { AssetID = "00001", AssetDescription = "Test Asset #1", CpuID = 1 };

    private List<SelectItem<int?>> cpus = new List<SelectItem<int?>>()
{
        new SelectItem<int?> {Id = 1, Text = "Intel Celeron 1.80GHz"},
        new SelectItem<int?> {Id = 2, Text = "AMD Ryzen Threadripper PRO 3995WX"},
        new SelectItem<int?> {Id = 3, Text = "HamsterWheel 98"}
    };

    private SelectItem<int?> myCpu1 = new SelectItem<int?>();

    private int myKey;
    private string myCpu2String = "Intel Celeron 1.80GHz";

    private void updateCpu1()
    {
        int next = 0;
        if (myCpu1 is not null)
        {
            next = myCpu1.Id ?? 0;
            if (next >= cpus.Count) next = 0;
        }
        { myCpu1 = cpus[next]; }
    }


    private void update1()
    {
        myCpu1 = new SelectItem<int?>();
        myCpu1.Id = myAsset.CpuID ?? 0;
        myCpu1.Text = cpus.Where(x => x.Id == myCpu1.Id).FirstOrDefault().Text;
    }

    private void update2()
    {
        myAsset.CpuID = (myCpu1?.Id ?? null);
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2);
        myCpu2String = "Intel Celeron 1.80GHz";
    }


    private async Task<IEnumerable<SelectItem<int?>>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(2);
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return cpus;
        return cpus.Where(x => x.Text.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

}
